import sqlite3
import time
import os
from modules.parsing_tasks import *
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
import config
import datetime

connect = sqlite3.connect(os.path.join(os.getcwd(), 'telegram_base.db'))
cursor = connect.cursor()

bot = Bot(config.tele_token)
dp = Dispatcher(bot)


def main_keyboard(user_id: int):
    admin_prof = cursor.execute(f"SELECT profile_id FROM profiles WHERE super_user='true'").fetchone()
    try:
        if user_id in admin_prof:
            return InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
                                                                          callback_data='add_task'),
                                                         InlineKeyboardButton(text='—É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è',
                                                                          callback_data='all_task'),
                                                         InlineKeyboardButton(text='—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É',
                                                                          callback_data='all_task'),
                                                         )
    except:
        return InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
                                                                          callback_data='add_task'),
                                                     InlineKeyboardButton(text='—É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è',
                                                                          callback_data='all_task'))


def registration():
    return InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='up_profile'))


add_task = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'),
                                                 InlineKeyboardButton(text='—É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='all_task'),
                                                 InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='up_profile'))

# –ö–Ω–æ–ø–∫–∏
menu_button = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/menu'))

last_message = []
last_profile = []
last_username = []


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä
@dp.message_handler(commands=['start', 'menu'])
async def start_menu(message: types.Message):
    prompt = ''
    all_reg_id = cursor.execute('SELECT profile_id FROM profiles').fetchall()
    all_tasks_id = cursor.execute(f'''SELECT type_todo, id, task
                                      FROM tasks WHERE profile_id = {message.from_user.id}
                                      AND (type_todo = 1 OR type_todo = 0)
                                      ORDER BY type_todo DESc''').fetchall()
    if not all_tasks_id:
        prompt = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç'
    else:
        emoji_todo = {1: 'üü®', 0: 'üü•'}
        for task in all_tasks_id:
            prompt += f'{emoji_todo[task[0]]}#[{task[1]}]: {task[2]}\n'

    if user_in_db(message.from_user.id, all_reg_id):
        await bot.send_message(message.from_user.id, f"üë§–ü—Ä–∏–≤–µ—Ç {message.from_user.username}\n"
                                                     f"–ù–∞ {str(datetime.date.today())[5:10]} —É –≤–∞—Å:\n"
                                                     f"-----------------------------------\n"
                                                     f"{prompt}\n"
                                                     f"-----------------------------------\n"
                                                     f"–ê—Å—Å–∏—Å—Å—Ç–µ–Ω—Ç: {0}\n"
                                                     f"—Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {0}",
                                                     reply_markup=main_keyboard(message.from_user.id))
    else:
        await bot.send_message(message.from_user.id, f'üåù–ü—Ä–∏–≤–µ—Ç {message.from_user.username}\n'
                                                     f'üöß–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ'
                                                     f"—Ç–æ–º –Ω–∞–∂–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ", reply_markup=registration())
        last_message.append(message.message_id + 1)
        last_profile.append(message.from_user.id)
        last_username.append(message.from_user.username)


@dp.message_handler()
async def start_menu(message: types.Message):
    if (message.text.split()[0]).lower() == 'admin' and message.text.split()[1] == config.admin_token:
        cursor.execute(f"UPDATE profiles SET super_user = ? WHERE profile_id = '{message.from_user.id}'", ('true',))
        await bot.send_message(message.from_user.id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    connect.commit()


# –ò–Ω–ª–∞–π–Ω —Ö–µ–Ω–¥—Ä–µ–ª—ã
@dp.callback_query_handler(text="up_profile")
async def send_random_value(callback: types.CallbackQuery):
    await bot.edit_message_text(message_id=last_message[-1], chat_id=last_profile[-1], text='üéâ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏'
                                                                                            '—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n'
                                                                                            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /menu '
                                                                                            '—á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é'
                                                                                            ' —Å—Ç—Ä–∞–Ω–∏—Ü—É')
    data = (int(last_profile[-1]), f'@{last_username[-1]}', 'false', 'false', 'noneteem')
    cursor.execute('INSERT INTO profiles(profile_id, profile_username, activity, super_user, teems) VALUES(?,?,?,?,?)', data)
    connect.commit()


'''
@dp.callback_query_handler(text="press_me")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer('1')
'''

if __name__ == '__main__':
    executor.start_polling(dp)
    connect.close()
